(print 5)
(print (quote (1 2)))
(print (cons 4 (quote (5 6))))
(print (car (quote (1 2))))
(print (cdr (quote (1 2))))
(print (cadr (quote (1 2))))
(print (cdar (quote ((1 3) 2))))
(print (quote (foo bar)))
(print (car (quote (foo bar))))
(print (cons (quote asdf) (quote (1337 bar))))
(print (cons
		 (car (quote (1 2)))
		 (cdr (quote (3 4)))))
(print (cons '4 '(5 qwe)))
(print (cons 'asdf (cdr '(5 qwe))))
(print (atom 'a))
(print (atom '(a)))
(print (atom 5))
(print (eq 6 3))
(print (eq 5 5))
(print (eq 'a 'b))
(print (eq 'b 'b))
(print (eq 'a (atom '(a))))
(print (eq (eq 4 2) (atom '(a))))
(print (cond ((eq 4 2) (car '(foo)))
			 ((atom 'x) (car '(asdf)))))
(print (cond ((eq 4 2) 'foobar)
			 ('true 'ok)))
(print ((lambda (x) (cons x '(b))) 'a))
(print ((lambda (x)
		  (cond
			((atom x) 'it-is-an-atom)
			('t 'it-is-not-an-atom)))
		'it-looks-like-an-atom))
(print ((lambda (a b) (cond (a b))) 'first 'second))
(print ((lambda (x y) (cons y (cons x '()))) 'first 'second))
(print (cond
		 ('() 'true-is-false)
		 ((atom '()) 'thats-better)
		 ('t 'foobar)))
(defun double (a) (cons a (cons a '())))
(defun transpose (a b) (cons b (cons a '())))
(print (double 'b))
(print (transpose 'x 'y))
(print (list (list 'x) (list 1 2 3)))
(print (list (and 1 '(a z)) (and 'foo '()) (and '() '())))
(print (list (null 'a) (null 4) (null '()) (null (quote (3 4 1)))))
(print (list (not 'a) (not 4) (not '()) (not (quote (3 4 1)))))
(print (append '(1 2 3) '(a b c)))
(defun zip (a b)
  (cond ((or (null a) (null b)) '())
		('t (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))))
(print (assoc 2 (zip '(1 2 3 2) '(a b c d))))
(print (eval '()))
(print (eval 'x '((x ()))))
(print (eval '(car '(1 2))))
(print (eval 'x '((y 2) (x asdf))))
(print (eval '(cons x '(b c)) '((x a) (b foo) (y bar))))
(print (eval '(cond
				((eq 4 2) 'foobar)
				('true 'ok))))
(print (eval '(f 'foo 'ok) '((f (lambda (x y) y)))))
(print (eval '(f 2) '((f (lambda (x) (cons x (cons x '())))))))
(assert 't)
(print "o hai")
(print (list 'foo "foo"))
