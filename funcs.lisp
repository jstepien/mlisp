(defun null (x)
  (eq x '()))
(defun and (x y)
  (cond (x (cond
			 (y 't)
			 ('t '())))
		('t '())))
(defun or (x y)
  (cond (x 't)
		(y 't)
		('t '())))
(defun not (x)
  (null x))
(defun append (a b)
  (cond ((null a) b)
		('t (cons (car a) (append (cdr a) b)))))
(defun assoc (item pairs)
  (cond ((null pairs) '())
		((eq item (caar pairs)) (cons item (cdar pairs)))
		('t (assoc item (cdr pairs)))))
(defun zip (a b)
  (cond ((or (null a) (null b)) '())
		('t (cons (list (car a) (car b)) (zip (cdr a) (cdr b))))))
(defun eval (what symbols)
  (cond ((or (null what) (numberp what)) what)
		((atom what) (cadr (assoc what symbols)))
		((atom (car what))
			  (cond
				((eq (car what) 'quote) (cadr what))
				((eq (car what) 'atom) (atom (eval (cadr what) symbols)))
				((eq (car what) 'eq) (eq (eval (cadr what) symbols)
										 (eval (caddr what) symbols)))
				((eq (car what) 'car) (car (eval (cadr what) symbols)))
				((eq (car what) 'cdr) (cdr (eval (cadr what) symbols)))
				((eq (car what) 'cons) (cons (eval (cadr what) symbols)
											 (eval (caddr what) symbols)))
				((eq (car what) 'cond) (evcon (cdr what) symbols))
				('t (eval (cons (cadr (assoc (car what) symbols))
								(cdr what))
						  symbols))))
		((eq (caar what) 'lambda)
		 (eval (cadr (cdar what))
			   (append (zip (cadar what) (evlis (cdr what) symbols))
					   symbols)))))
(defun evcon (cnd symbols)
  (cond ((eval (caar cnd) symbols) (eval (cadar cnd) symbols))
		('t (evcon (cdr cnd) symbols))))
(defun evlis (lst symbols)
  (cond ((null lst) '())
		('t (cons (eval (car lst) symbols)
				  (evlis (cdr lst) symbols)))))
